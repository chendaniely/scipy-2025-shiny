[
  {
    "objectID": "slides/01-intro/03-first-app.html#plan-out-your-application-data",
    "href": "slides/01-intro/03-first-app.html#plan-out-your-application-data",
    "title": "Your first application",
    "section": "Plan out your application data",
    "text": "Plan out your application data\n\nStart off with the data you have an some kind of data artifact without the interactivity\nUse a placeholder variable to apply the interactivity manually"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#visualizing-penguin-data",
    "href": "slides/01-intro/03-first-app.html#visualizing-penguin-data",
    "title": "Your first application",
    "section": "Visualizing penguin data",
    "text": "Visualizing penguin data\n\nfrom palmerpenguins import load_penguins\nfrom plotnine import aes, geom_histogram, ggplot, theme_minimal\n\ndat = load_penguins()\ndat.head()\n\nspecies = \"Adelie\"  # selected species\nsel = dat.loc[dat.species == species] # selected data\n\n(\n    ggplot(aes(x=\"bill_length_mm\"))\n    + geom_histogram(dat, fill=\"#C2C2C4\", binwidth=1)\n    + geom_histogram(sel, fill=\"#447099\", binwidth=1)\n    + theme_minimal()\n)"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#visualizing-penguin-data-output",
    "href": "slides/01-intro/03-first-app.html#visualizing-penguin-data-output",
    "title": "Your first application",
    "section": "Visualizing penguin data",
    "text": "Visualizing penguin data"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#change-the-species",
    "href": "slides/01-intro/03-first-app.html#change-the-species",
    "title": "Your first application",
    "section": "Change the species",
    "text": "Change the species\n\nfrom palmerpenguins import load_penguins\nfrom plotnine import aes, geom_histogram, ggplot, theme_minimal\n\ndat = load_penguins()\ndat.head()\n\nspecies = \"Gentoo\"  # change species\nsel = dat.loc[dat.species == species]\n\n(\n    ggplot(aes(x=\"bill_length_mm\"))\n    + geom_histogram(dat, fill=\"#C2C2C4\", binwidth=1)\n    + geom_histogram(sel, fill=\"#447099\", binwidth=1)\n    + theme_minimal()\n)"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#change-the-species-output",
    "href": "slides/01-intro/03-first-app.html#change-the-species-output",
    "title": "Your first application",
    "section": "Change the species",
    "text": "Change the species"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#your-turn",
    "href": "slides/01-intro/03-first-app.html#your-turn",
    "title": "Your first application",
    "section": "Your Turn",
    "text": "Your Turn\n\nCreate the working baseline code:\n\n\n  \n    −\n    +\n \n 02:00\n \n\nfrom palmerpenguins import load_penguins\nfrom plotnine import aes, geom_histogram, ggplot, theme_minimal\n\ndat = load_penguins()\ndat.head()\n\nspecies = \"Gentoo\"  # Adelie, Gentoo, Chinstrap\nsel = dat.loc[dat.species == species]\n\n(\n    ggplot(aes(x=\"bill_length_mm\"))\n    + geom_histogram(dat, fill=\"#C2C2C4\", binwidth=1)\n    + geom_histogram(sel, fill=\"#447099\", binwidth=1)\n    + theme_minimal()\n)"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#the-user-interface",
    "href": "slides/01-intro/03-first-app.html#the-user-interface",
    "title": "Your first application",
    "section": "The user interface",
    "text": "The user interface\n\nBest try to mock up or wireframe a UI before starting\nInput Components Gallery: https://shiny.posit.co/py/components/#inputs\nWhat might be a good component to use?\n\n\n  \n    −\n    +\n \n 01:00"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#radio-buttons",
    "href": "slides/01-intro/03-first-app.html#radio-buttons",
    "title": "Your first application",
    "section": "Radio Buttons",
    "text": "Radio Buttons\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n# | standalone: true\n# | components: [editor, viewer]\n# | layout: horizontal\nfrom shiny.express import ui\n\nui.input_radio_buttons(\n    id=\"species\",\n    label=\"Species\",\n    choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n)"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#run-your-application",
    "href": "slides/01-intro/03-first-app.html#run-your-application",
    "title": "Your first application",
    "section": "Run your application",
    "text": "Run your application\n\nPositron/VS Code + Shiny Extension\n\n\n\nCommand line:\n\nshiny run --reload app.py"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#radio-buttons-options",
    "href": "slides/01-intro/03-first-app.html#radio-buttons-options",
    "title": "Your first application",
    "section": "Radio Buttons: options",
    "text": "Radio Buttons: options\nhttps://shiny.posit.co/py/api/express/express.ui.input_radio_buttons.html\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n# | standalone: true\n# | components: [editor, viewer]\n# | layout: horizontal\nfrom shiny.express import ui\n\nui.input_radio_buttons(\n    id=\"species\",\n    label=\"Species\",\n    choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n    inline=True,\n)\n\n  \n    −\n    +\n \n 02:00"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#add-in-the-figure",
    "href": "slides/01-intro/03-first-app.html#add-in-the-figure",
    "title": "Your first application",
    "section": "Add in the figure",
    "text": "Add in the figure\nNow let’s add all that data and plotting code from earlier into our application.\nIf we just dump in our code, the application errors because it does not know what to do with the figure that’s trying to be printed."
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#output-will-error",
    "href": "slides/01-intro/03-first-app.html#output-will-error",
    "title": "Your first application",
    "section": "Output will error",
    "text": "Output will error\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n# | standalone: true\n# | components: [editor, viewer]\n# | layout: horizontal\nfrom shiny.express import ui\n\nfrom palmerpenguins import load_penguins\nfrom plotnine import aes, geom_histogram, ggplot, theme_minimal\n\nui.input_radio_buttons(\n    id=\"species\",\n    label=\"Species\",\n    choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n    inline=True,\n)\n\ndat = load_penguins()\nspecies = \"Adelie\"\nsel = dat.loc[dat.species == species]\n\n# this will cause a TypeError: Invalid tag item type\n(\n    ggplot(aes(x=\"bill_length_mm\"))\n    + geom_histogram(dat, fill=\"#C2C2C4\", binwidth=1)\n    + geom_histogram(sel, fill=\"#447099\", binwidth=1)\n    + theme_minimal()\n)"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#outputs",
    "href": "slides/01-intro/03-first-app.html#outputs",
    "title": "Your first application",
    "section": "Outputs",
    "text": "Outputs\n\nEach output needs to be wrapped in it’s own function with the corresponding output decorator.\n\nhttps://shiny.posit.co/py/components/#outputs\n\nWe now need to use one of the built-in Shiny output components,\nSpecifically, one that can render a plotnine figure (which is based on matplotlib), plot output component.\nFor example, we want to return a plot, so we will need to wrap our plotnine code, and decorate it with the @render.plot decorator."
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#render-plot-output",
    "href": "slides/01-intro/03-first-app.html#render-plot-output",
    "title": "Your first application",
    "section": "Render plot output",
    "text": "Render plot output\n@render.plot #&lt;&lt;\ndef plot(): #&lt;&lt;\n    return ( #&lt;&lt;\n        ggplot(aes(x=\"bill_length_mm\"))\n        + geom_histogram(dat, fill=\"#C2C2C4\", binwidth=1)\n        + geom_histogram(sel, fill=\"#447099\", binwidth=1)\n        + theme_minimal()\n    )\n\n\n\n\n\n\nReturn the output\n\n\nDon’t forget to return the object you want displayed in the function! Otherwise the output will not render."
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#render-plot-output-1",
    "href": "slides/01-intro/03-first-app.html#render-plot-output-1",
    "title": "Your first application",
    "section": "Render plot output",
    "text": "Render plot output\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n# | standalone: true\n# | components: [editor, viewer]\n# | layout: horizontal\nfrom shiny.express import ui, render\n\nfrom palmerpenguins import load_penguins\nfrom plotnine import aes, geom_histogram, ggplot, theme_minimal\n\nui.input_radio_buttons(\n    id=\"species\",\n    label=\"Species\",\n    choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n    inline=True,\n)\n\ndat = load_penguins()\nspecies = \"Adelie\"\nsel = dat.loc[dat.species == species]\n\n@render.plot #&lt;&lt;\ndef plot(): #&lt;&lt;\n    return ( #&lt;&lt;\n        ggplot(aes(x=\"bill_length_mm\"))\n        + geom_histogram(dat, fill=\"#C2C2C4\", binwidth=1)\n        + geom_histogram(sel, fill=\"#447099\", binwidth=1)\n        + theme_minimal()\n    )"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#reactivity",
    "href": "slides/01-intro/03-first-app.html#reactivity",
    "title": "Your first application",
    "section": "Reactivity",
    "text": "Reactivity\n\nBut the radio buttons don’t change anything\nWe didn’t connect the input component to the output component\nReactivity is what makes Shiny unique"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#the-data-reacts-to-the-input",
    "href": "slides/01-intro/03-first-app.html#the-data-reacts-to-the-input",
    "title": "Your first application",
    "section": "The data reacts to the input",
    "text": "The data reacts to the input\ndat = load_penguins()\n\n@render.plot\ndef plot():\n    species = input.species() #&lt;&lt;\n    sel = dat.loc[dat.species == species] #&lt;&lt;\n\n    return (\n        ggplot(aes(x=\"bill_length_mm\"))\n        + geom_histogram(dat, fill=\"#C2C2C4\", binwidth=1)\n        + geom_histogram(sel, fill=\"#447099\", binwidth=1)\n        + theme_minimal()\n    )"
  },
  {
    "objectID": "slides/01-intro/03-first-app.html#your-first-application",
    "href": "slides/01-intro/03-first-app.html#your-first-application",
    "title": "Your first application",
    "section": "Your first application",
    "text": "Your first application\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 500\n\nfrom palmerpenguins import load_penguins\nfrom plotnine import aes, geom_histogram, ggplot, theme_minimal\nfrom shiny.express import input, render, ui\n\ndat = load_penguins()\nspecies = dat[\"species\"].unique().tolist()\n\nui.input_radio_buttons(\"species\", \"Species\", species, inline=True)\n\n\n@render.plot\ndef plot():\n    sel = dat[dat[\"species\"] == input.species()]\n    return (\n        ggplot(aes(x=\"bill_length_mm\"))\n        + geom_histogram(dat, fill=\"#C2C2C4\", binwidth=1)\n        + geom_histogram(sel, fill=\"#447099\", binwidth=1)\n        + theme_minimal()\n    )\n\n  \n    −\n    +\n \n 05:00"
  },
  {
    "objectID": "slides/01-intro/01-welcome.html#get-your-computer-ready",
    "href": "slides/01-intro/01-welcome.html#get-your-computer-ready",
    "title": "Welcome",
    "section": "Get your computer ready",
    "text": "Get your computer ready\nIf you haven’t done so, please have your computer set up for this workshop:\nhttps://chendaniely.github.io/scipy-2025-shiny/setup.html"
  },
  {
    "objectID": "slides/01-intro/01-welcome.html#todays-goal",
    "href": "slides/01-intro/01-welcome.html#todays-goal",
    "title": "Welcome",
    "section": "Today’s goal",
    "text": "Today’s goal\nLearn how to build reactive web apps with Shiny for Python, from the simple to the mission critical."
  },
  {
    "objectID": "slides/01-intro/01-welcome.html#who-you-are",
    "href": "slides/01-intro/01-welcome.html#who-you-are",
    "title": "Welcome",
    "section": "Who you are",
    "text": "Who you are\n\nHave you used:\n\nPython?\nDashboard?\nHTML, CSS, JavaScript?\nShiny (for R or Python)?"
  },
  {
    "objectID": "slides/01-intro/01-welcome.html#goals-for-this-section",
    "href": "slides/01-intro/01-welcome.html#goals-for-this-section",
    "title": "Welcome",
    "section": "Goals for this section",
    "text": "Goals for this section\n\nUnderstand the “whole game”/ big picture\nIdentify the resources that will support you\nDevelop comfort with debugging\nGenAI + LLMs in your dashboards and applications\nModules and Testing\nQ+A with the Shiny Developers"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SciPy 2025: Shiny for Python",
    "section": "",
    "text": "Shiny is a framework for building web applications and data dashboards in Python. In this workshop, you will see how the basic building blocks of shiny can be extended to create your own scalable production-ready python applications."
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "SciPy 2025: Shiny for Python",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\nTime\nActivity\n\n\n\n\n13:30\nWelcome!\n\n\n13:–\nBasic building blocks of a Shiny application\n\n\n13:–\nInput components\n\n\n13:–\nOutput components\n\n\n14:20\nbreak\n\n\n14:30\nA more complex application\n\n\n14:–\nShiny’s reactivity programming model\n\n\n15:–\nDeploying your application to the web (for free!)\n\n\n15:20\nbreak\n\n\n15:–\nAnatomy of a conversation\n\n\n15:–\nDemo: 20 Questions\n\n\n15:–\nYour first chat with an LLM\n\n\n15:–\nAI Chat Interfaces\n\n\n15:–\nTool Calling\n\n\n16:20\nbreak\n\n\n16:30\nShiny modules\n\n\n16:–\nTesting your shiny apps with playwright\n\n\n17:00\nQ+A with the Shiny engineers\n\n\n17:30\nEnd"
  },
  {
    "objectID": "index.html#faq",
    "href": "index.html#faq",
    "title": "SciPy 2025: Shiny for Python",
    "section": "FAQ",
    "text": "FAQ\n\nWhat if I’m a complete beginner?\nYou should have a basic understanding of Python and be able to install packages with pip, do basic data manipulation, and draw plots.\n\n\nWhat if I’ve never built a Shiny app before?\nThis workshops doesn’t require any Shiny or web application experience. We’ll focus more on practical examples in the course. We do have additional resources for you to dive more into more Shiny details, but we will cover the basics needed to build larger and scalable applications.\n\n\nWhy should I learn Shiny if I already know Streamlit or Dash?\nWe believe that Shiny is the best framework for building data applications in Python. It’s reactive execution model means that you can build performant applications without explicitly caching data or managing application state. See this blog post for more on why we think that Shiny is worth learning.\n\n\nI already know Shiny for R, is this workshop for me?\nThe R and Python Shiny packages are quite similar, so some of the content in this workshop may be familiar to you. That said it’s a great opportunity to fill in missing pieces and ask question about Python best practices. We will also talk about Shiny modules and testing in this workshop, which will also be a precursor for you to learn more or incorporate Python Packaging to your Shiny applications."
  },
  {
    "objectID": "01-02-intro-shiny.html",
    "href": "01-02-intro-shiny.html",
    "title": "Shiny introduction",
    "section": "",
    "text": "View slides in full screen",
    "crumbs": [
      "Setup",
      "Introduction",
      "Shiny introduction"
    ]
  },
  {
    "objectID": "01-01-welcome.html",
    "href": "01-01-welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "View slides in full screen",
    "crumbs": [
      "Setup",
      "Introduction",
      "Welcome"
    ]
  },
  {
    "objectID": "01-03-first-app.html",
    "href": "01-03-first-app.html",
    "title": "Your first application",
    "section": "",
    "text": "View slides in full screen",
    "crumbs": [
      "Setup",
      "Introduction",
      "Your first application"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup",
    "section": "",
    "text": "Pick one of the following ways to set up your Python environment.\nHere is the requirements.txt you will need to set up the environment.\naltair\nanthropic\nanthropic[bedrock]\nboto3\nchatlas\nfaicons\nipykernel\njupyter\nlangchain\nlangchain-anthropic\nlangchain-openai\nlanggraph\nopenai\npalmerpenguins\npandas\npillow\nplaywright\nplotly\nplotnine\npython-dotenv\nquerychat @ git+https://github.com/posit-dev/querychat\nrequests\nridgeplot\nseaborn\nshiny\nshinychat\nshinylive\nshinywidgets\ntokenizers\n\n\nconda create -n shiny python=3.12\nconda activate shiny\npip install -r requirements.txt\n\n\n\npython -m venv venv\nsource venv/bin/activate && pip install -r requirements.txt\n\n\n\nuv venv venv\nsource venv/bin/activate && uv pip install -r requirements.txt"
  },
  {
    "objectID": "setup.html#python",
    "href": "setup.html#python",
    "title": "Setup",
    "section": "",
    "text": "Pick one of the following ways to set up your Python environment.\nHere is the requirements.txt you will need to set up the environment.\naltair\nanthropic\nanthropic[bedrock]\nboto3\nchatlas\nfaicons\nipykernel\njupyter\nlangchain\nlangchain-anthropic\nlangchain-openai\nlanggraph\nopenai\npalmerpenguins\npandas\npillow\nplaywright\nplotly\nplotnine\npython-dotenv\nquerychat @ git+https://github.com/posit-dev/querychat\nrequests\nridgeplot\nseaborn\nshiny\nshinychat\nshinylive\nshinywidgets\ntokenizers\n\n\nconda create -n shiny python=3.12\nconda activate shiny\npip install -r requirements.txt\n\n\n\npython -m venv venv\nsource venv/bin/activate && pip install -r requirements.txt\n\n\n\nuv venv venv\nsource venv/bin/activate && uv pip install -r requirements.txt"
  },
  {
    "objectID": "setup.html#ide",
    "href": "setup.html#ide",
    "title": "Setup",
    "section": "IDE",
    "text": "IDE\nI’m using Positron: https://positron.posit.co/, but feel free to use VS Code. We will not be working with Jupyter Notebooks in this workshop.\nYou will need the Shiny - VS Code Extension"
  },
  {
    "objectID": "setup.html#chat-model",
    "href": "setup.html#chat-model",
    "title": "Setup",
    "section": "Chat Model",
    "text": "Chat Model\n\nGitHub Models\nYou will need to create a GitHub Personal Access Token (PAT). It does not need any context (e.g., repo, workflow, etc).\nGeneral instructions from the GitHub docs on creating a PAT: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic\nInstructions from the GitHub Models docs: https://github.com/Azure-Samples/python-ai-agent-frameworks-demos/tree/main?tab=readme-ov-file#configuring-github-models\n\n\n(optional) Local LLM: Ollama\n\nDownload Ollama: https://ollama.com/\nPick one of the many llama models on their model page from: https://ollama.com/search.\n\nPick any random model that will fit on your computer\nYou can pick multiple models if you’d like, we will compare results during workshop.\nHere are a few example models with their download sizes you can try:\n\n\n\n\n\nModel\nDownload Size\nURL\nInstall Command\n\n\n\n\nqwen3:0.6b\n523MB\nhttps://ollama.com/library/qwen3\nollama run qwen3:0.6b\n\n\nqwen\n5.2GB\n-\nollama run qwen3\n\n\nPhi 4 mini\n3.2GB\nhttps://ollama.com/library/phi4-reasoning\nollama run phi4-mini-reasoning\n\n\ndevstral\n14GB\nhttps://ollama.com/library/devstral\nollama run devstral\n\n\nllama4\n67GB\nhttps://ollama.com/library/llama4\nollama run llama4\n\n\nllama4:128x17b\n245GB\n-\nollama run llama4:128x17b\n\n\n\n\n\n(Optional): Chat provider with API (paid)\nIf you pay for Claude, OpenAI, etc access with their web/desktop application, this is a separate purchase for the API key. Depending on your usage, you may even find that paying for the API key could be cheaper!\n\nAnthropic Claude\n\nSign up at https://console.anthropic.com.\nLoad up enough credit so you won’t be sad if something goes wrong.\nCreate a key at https://console.anthropic.com/settings/keys\n\n\n\nGoogle Gemini\n\nLog in to https://aistudio.google.com with a google account\nClick create API key & copy it to the clipboard.\n\n\n\nOpenAI ChatGPT\n\nSign up at https://openai.com/\nCreate a key at https://platform.openai.com/api-keys"
  },
  {
    "objectID": "setup.html#check-your-installation",
    "href": "setup.html#check-your-installation",
    "title": "Setup",
    "section": "Check your installation",
    "text": "Check your installation\n\nClone / download this repository: https://github.com/chendaniely/scipy-2025-shiny\nActivate the Python environment with the packages you just installed\nRun the test-install.py app and script with: shiny run test-install.py\n\nYou should see output like this\n$ shiny run test-install.py\nINFO:     Started server process [46615]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)"
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#what-is-a-shiny-app",
    "href": "slides/01-intro/02-intro-shiny.html#what-is-a-shiny-app",
    "title": "Introduction to Shiny",
    "section": "What is a Shiny app?",
    "text": "What is a Shiny app?\nEach Shiny app involves:\n\nA web page\nA computer that watches the web page and responds to user events on that page"
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#what-is-a-shiny-app-1",
    "href": "slides/01-intro/02-intro-shiny.html#what-is-a-shiny-app-1",
    "title": "Introduction to Shiny",
    "section": "What is a Shiny app?",
    "text": "What is a Shiny app?\nEach Shiny app involves:\n\nA web page\nA computer that watches the web page and responds to user events on that page"
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#what-is-a-shiny-app-2",
    "href": "slides/01-intro/02-intro-shiny.html#what-is-a-shiny-app-2",
    "title": "Introduction to Shiny",
    "section": "What is a Shiny app?",
    "text": "What is a Shiny app?\nEach Shiny app involves:\n\nA web page\nA computer that watches the web page and responds to user events on that page"
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#components",
    "href": "slides/01-intro/02-intro-shiny.html#components",
    "title": "Introduction to Shiny",
    "section": "Components",
    "text": "Components\n\n\nEach Shiny app consists of:\n\nInputs"
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#components-1",
    "href": "slides/01-intro/02-intro-shiny.html#components-1",
    "title": "Introduction to Shiny",
    "section": "Components",
    "text": "Components\n\n\nEach Shiny app consists of:\n\nInputs\nOutputs"
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#components-2",
    "href": "slides/01-intro/02-intro-shiny.html#components-2",
    "title": "Introduction to Shiny",
    "section": "Components",
    "text": "Components\n\n\nEach Shiny app consists of:\n\nInputs\nOutputs\nInstructions on how to build outputs from inputs"
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#reactivity",
    "href": "slides/01-intro/02-intro-shiny.html#reactivity",
    "title": "Introduction to Shiny",
    "section": "Reactivity",
    "text": "Reactivity\n\n\nWhen an input changes, Shiny reacts by rebuilding the outputs that depend on it, and only those outputs."
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#spreadsheet-analogy",
    "href": "slides/01-intro/02-intro-shiny.html#spreadsheet-analogy",
    "title": "Introduction to Shiny",
    "section": "Spreadsheet Analogy",
    "text": "Spreadsheet Analogy\n\n\n\n\n\n\nInputs\nOutputs\nInstructions on how to build outputs from inputs"
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#spreadsheet-analogy-1",
    "href": "slides/01-intro/02-intro-shiny.html#spreadsheet-analogy-1",
    "title": "Introduction to Shiny",
    "section": "Spreadsheet Analogy",
    "text": "Spreadsheet Analogy\n\n\n\n\n\nUpdates:\n\nWhen an input changes\nOnly the parts of the app that depend on the input"
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#key-features-of-reactivity",
    "href": "slides/01-intro/02-intro-shiny.html#key-features-of-reactivity",
    "title": "Introduction to Shiny",
    "section": "Key features of reactivity",
    "text": "Key features of reactivity\n\nEasy enough to use for prototypes\nEfficient enough to handle complexity\nScales to build production quality apps"
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#why-shiny-for-python",
    "href": "slides/01-intro/02-intro-shiny.html#why-shiny-for-python",
    "title": "Introduction to Shiny",
    "section": "Why Shiny for Python?",
    "text": "Why Shiny for Python?\nShiny lets you quickly create reactive web apps without worrying about:\n\ncache\nstate\ncallbacks\n…or even HTML, CSS, and JavaScript\n\nAnd, these apps can scale from prototype to production-ready."
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#quiz-find-the-inputs-and-outputs",
    "href": "slides/01-intro/02-intro-shiny.html#quiz-find-the-inputs-and-outputs",
    "title": "Introduction to Shiny",
    "section": "Quiz: Find the inputs and outputs",
    "text": "Quiz: Find the inputs and outputs"
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#quiz-find-the-inputs-and-outputs-1",
    "href": "slides/01-intro/02-intro-shiny.html#quiz-find-the-inputs-and-outputs-1",
    "title": "Introduction to Shiny",
    "section": "Quiz: Find the inputs and outputs",
    "text": "Quiz: Find the inputs and outputs"
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#quiz-find-the-inputs-and-outputs-2",
    "href": "slides/01-intro/02-intro-shiny.html#quiz-find-the-inputs-and-outputs-2",
    "title": "Introduction to Shiny",
    "section": "Quiz: Find the inputs and outputs",
    "text": "Quiz: Find the inputs and outputs"
  },
  {
    "objectID": "slides/01-intro/02-intro-shiny.html#tell-me-about-shiny-express",
    "href": "slides/01-intro/02-intro-shiny.html#tell-me-about-shiny-express",
    "title": "Introduction to Shiny",
    "section": "Tell me about Shiny Express",
    "text": "Tell me about Shiny Express\n\n\n\n\n\n\nImportant\n\n\nShiny for Python has two syntaxes for writing the same apps:\n\nShiny Express - lightweight syntax informed by notebooks\nShiny Core - more verbose syntax similar to Shiny for R\n\n\n\n\nToday, we will learn Shiny Express."
  }
]